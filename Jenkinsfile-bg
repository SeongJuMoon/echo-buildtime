podTemplate(
  serviceAccount: 'jenkins',
  containers: [
    containerTemplate(
      name: 'maven',
      image: 'maven:3-jdk-8',
      resourceLimitMemory: '300Mi',
      ttyEnabled: true,
      command: 'cat'
    ),
    containerTemplate(
      name: 'kustomize',
      image: 'webfuel/kustomize:3.6.1',
      ttyEnabled: true,
      command: 'cat'
    )
  ],
  volumes: [
    hostPathVolume(mountPath: '/var/run/docker.sock', hostPath: '/var/run/docker.sock'),
    hostPathVolume(mountPath: '/root/.m2', hostPath: '/tmp/.m2'),
    hostPathVolume(mountPath: '/bin/kubectl', hostPath: '/bin/kubectl'),
    hostPathVolume(mountPath: '/bin/docker', hostPath: '/bin/docker'),
  ]
)

{
    node(POD_LABEL) {
        stage('git scm update'){
                git 'https://github.com/prj4devops/echo-buildtime.git'
        }
        stage('packaing'){
            container('maven'){
                sh 'export MAVEN_OPTS=-Xmx300m; mvn package'
            }
        }
        stage('build docker container') {
            container('maven'){
                sh 'docker build -t 192.168.1.10:8443/echo-buildtime:$BUILD_NUMBER .'
                sh 'docker push 192.168.1.10:8443/echo-buildtime:$BUILD_NUMBER'
            }
        }
        stage('update pods'){
            container('kustomize'){
              dir('bluegreen/deployment'){
                sh '''
                kustomize create --resources ./deployment.yaml
                echo "새로운 파드를 포함하는 Deployment를 배포"
                kustomize edit add label deploy:$BUILD_NUMBER -f
                kustomize edit set namesuffix -- -$BUILD_NUMBER
                kustomize edit set image 192.168.1.10:8443/echo-buildtime:$BUILD_NUMBER
                kustomize build . | kubectl apply -f -
                echo "새 Deployment가 배포된 것을 조회"
                kubectl get deployment -o wide
                '''
              }
              dir('bluegreen/service'){
                sh '''
                kustomize create --resources ./lb.yaml
                while true;
                do
                export replicas=$(kubectl get deployment --selector=app=echo-buildtime,deploy=$BUILD_NUMBER -o jsonpath --template="{.items[0].status.replicas}")
                export ready=$(kubectl get deployment --selector=app=echo-buildtime,deploy=$BUILD_NUMBER -o jsonpath --template="{.items[0].status.readyReplicas}")
                echo "총 레플리카: $replicas, 준비된 레플리카: $ready"
                if [ "$ready" == "$replicas" ]; then
                  echo "모든 레플리카가 배포되었으므로 로드밸런서의 대상 Deployment 교체"
                  kustomize edit add label deploy:$BUILD_NUMBER -f
                  kustomize build . | kubectl apply -f -
                  echo "현재 배포된 것과 일치하지 않는 Deployment를 삭제 후 조회"
                  kubectl delete deployment --selector=app=echo-buildtime,deploy!=$BUILD_NUMBER
                  kubectl get deployment -o wide
                  break
                else
                  sleep 1
                fi
                done
                '''
              }
            }
        }

    }
}
